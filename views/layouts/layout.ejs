<!DOCTYPE html>
<html>

<head>
  <title>TheraMin</title>

  <!-- Viewport mobile tag for sensible mobile support -->
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1" />

  <% /* If you want to discourage search engines from indexing this site, uncomment the following line: */%>
  <% /* <meta name="robots" content="noindex" />
    */%>

  <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

  <!--STYLES-->
  <link rel="stylesheet" href="/dependencies/bootstrap.min.css">
  <link rel="stylesheet" href="/styles/importer.css">
  <link rel="stylesheet" href="/styles/styles.css">
  <!--STYLES END-->
  <link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css" rel="stylesheet" />
</head>

<body class="bg-light">
  <!--SCRIPTS-->
  <script src="/dependencies/sails.io.js"></script>
  <script src="/dependencies/bootstrap.min.js"></script>
  <script src="/dependencies/vue.global.js"></script>
  <script src="/dependencies/z-vue-router.global.js"></script>
  <!--SCRIPTS END-->

  <header class="sticky-top">
    <div class="container-fluid justify-content-center bg-light row m-auto">
      <a class="col-12 col-md-8 text-center display-flex p-auto" href="/"><img class="w-50" alt="HeaderLogo" src="/images/icon_schrift_daneben.png" /></a>
    </div>
    <nav class="navbar navbar-expand-md ms-3 justify-content-end navbar-dark bg-primary">
      <button class="navbar-toggler me-3" type="button" data-bs-toggle="collapse" data-bs-target=".into-burger" aria-controls="into-burger" aria-expanded="false">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse ms-auto into-burger order-0" id="navbarNav">
        <ul class="navbar-nav">
          <li class="nav-item">
            <a class="nav-link text-white" href="/">Home</a>
          </li>
          <li class="nav-item">
            <a class="nav-link text-white" href="/practice">Praxissuche</a>
          </li>
          <%if(req.me && !req.me.isTherapist){%>
          <li class="nav-item ">
            <a class="nav-link text-white" href="/patient/show">Mein Profil</a>
          </li>
          <%}else if(req.me && req.me.isTherapist){%>
          <li class="nav-item">
            <a class="nav-link text-white" href="/therapist/overview">Termin√ºbersicht</a>
          </li>
          <%}%> 
          <%if(req.me && req.me.isPracticeAdmin){%>
          <li class="nav-item">
            <a class="nav-link text-white" href="/practice/admin">Praxis verwalten</a>
          </li>
          <%}%>
          <%if (!req.me){%>
          <li class="nav-item">
            <a class="nav-link text-white" href="/practice/new">Praxis registrieren</a>
          </li>
          <%}%>
        </ul>
      </div>
      <div class="collapse navbar-collapse me-5 justify-content-end into-burger order-1">
        <ul class="navbar-nav">
          <%if (!req.me){%>
          <li class="nav-item">
            <a class="nav-link text-white" href="/login">Login</a>
          </li>
          <li class="nav-item">
            <a class="nav-link text-white" href="/entrance/signup">Registrieren</a>
          </li>
          <% }else{%>
          <li class="nav-item">
            <a class="nav-link text-white" href="/logout">Logout</a>
          </li>
          <%}%>
        </ul>
      </div>
    </nav>
  </header>

  <main class="bg-white">
    <%- body %>
          </main>

          <footer class="footer bg-light mt-2">
            <div class="container-fluid">
              <div class="row bg-dark p-2 mt-0"></div>
              <div class="row justify-content-center">
                <img class="col-5 col-md-3 col-lg-1"  alt="FootherLogo" src="/images/icon_allein.png" />
              </div>
              <div class="row justify-content-center mt-4">
                <a href="https://www.facebook.com/HTWGkonstanz/" aria-label="Facebook" class="btn social-btn fa fa-facebook m-1" id="fb"></a>
                <a href="https://twitter.com/htwg" aria-label="Twitter" class="btn social-btn fa fa-twitter m-1" id="twitter"></a>
                <a href="https://www.linkedin.com/school/htwg-konstanz/" aria-label="linkedin" class="btn social-btn fa fa-linkedin m-1" id="linkedin"></a>
                <a href="https://www.youtube.com/hochschulekonstanz" aria-label="Youtube" class="btn social-btn fa fa-youtube m-1" id="yt"></a>
              </div>
              <div class="row justify-content-center mb-5 mt-4">
                <a class="btn col-3 col-md-2 col-lg-1 m-1" href="https://www.htwg-konstanz.de/hochschule/kontakt">Kontakt</a>
                <a class="btn col-3 col-md-2 col-lg-1 m-1" href="/impressum">Impressum</a>
              </div>
            </div>
          </footer>

          <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like React, Vue.js, Angular, Ember, and Backbone
        require that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different view engine (handlebars, dust, pug/jade, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

          <!--TEMPLATES-->
          <!--TEMPLATES END-->

          <!--
        Server-side View Locals
        ========================

        Sometimes, it's convenient to get access to your server-side view locals from
        client-side JavaScript.  This can improve page load times, remove the need for
        extra AJAX requests, and make your client-side code easier to understand and
        to maintain.  Sails provides a simple mechanism for accessing dynamic view
        locals: the "exposeLocalsToBrowser()" view partial.

        For more information on using this built-in feature, see:
        https://sailsjs.com/docs/concepts/views/locals#?escaping-untrusted-data-using-exposelocalstobrowser

    -->

          <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->


</body>

</html>