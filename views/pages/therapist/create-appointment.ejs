<div class="container py-4 px-4">
    <div class="card shadow px-4 pt-2">
        <h2 class="card-title py-2">Termin erstellen</h2>
        <div id="app" class="card-body">
            <form action="/appointment-as-therapist" method="post">
                <input type="hidden" value="<%=therapist.id%>" name="therapist" />
                <div class="row">
                    <div class="form-group col-md-3 px-3">
                        <input type="radio" class="form-check-input" name="existing-patient" v-model="existingPatient"
                            :value="true" checked />
                        <label class="form-check-label">Registrierter Patient</label>
                    </div>
                    <div class="form-group col-md-3 px-3">
                        <input type="radio" class="form-check-input" name="existing-patient" v-model="existingPatient"
                            :value="false" />
                        <label class="form-check-label">Neuer Patient</label>
                    </div>
                </div>
                <div class="row" v-if="existingPatient">
                    <div class="form-group col-md-6 px-0">
                        <label class="form-label">Patient</label>
                        <select class="form-control" name="patId" required>
                            <option v-for="patient in patients" :value="patient.id">
                                {{ patient.name }}, {{ patient.firstname }}
                            </option>
                        </select>
                    </div>
                </div>
                <div class="row" v-else>
                    <div class="form-group col-md-6 px-0">
                        <label class="form-label">Name</label>
                        <input v-model="name" type="text" class="form-control" maxlength="50" minlength="0"
                            name="patName" placeholder="Name" @change="validate" />
                    </div>
                    <div class="form-group col-md-6 px-0 pl-md-4">
                        <label class="form-label">Vorname</label>
                        <input v-model="firstname" type="text" class="form-control" maxlength="50" minlength="0"
                            name="patFirstname" placeholder="Vorname" @change="validate" />
                    </div>
                </div>
                <div v-if="invalidChars" class="text-center text-danger">
                    Name und Vorname dürfen keine Sonderzeichen oder Zahlen enthalten!
                </div>
                <div class="row">
                    <div class="form-group col-md-6 px-0">
                        <label class="form-label">Datum</label>
                        <input type="date" class="form-control" min="<%= new Date().toISOString().substring(0,10)%>"
                            name="date" v-model="dateStr" @change="getTimes" required />
                    </div>
                    <div class="form-group col-md-6 px-0 pl-md-4">
                        <label class="form-label">Uhrzeit</label>
                        <select class="form-control" name="time" required>
                            <option v-for="time in times" :value="time">
                                {{ time.substring(0, 5) }}
                            </option>
                        </select>
                    </div>
                </div>
                <div class="row text-danger pb-2" v-if="noTimes">
                    Für das ausgewählte Datum sind keine Zeit-Slots verfügbar!
                </div>
                <div class="row">
                    <div class="form-group px-0 col-12 pb-4">
                        <label class="form-label">Indikation</label>
                        <input type="text" class="form-control" name="indication" max="100" />
                    </div>
                </div>
                <div class="row justify-content-end">
                    <button type="submit" class="btn btn-primary">Termin anlegen</button>
                </div>
            </form>
        </div>
    </div>
</div>
<script>
    const app = Vue.createApp({
        data: function () {
            return {
                existingPatient: true,
                patients: [],
                times: [],
                therapist: [],
                dateStr: "",
                noTimes: false,
                name: "",
                firstname: "",
                invalidChars: false,
            };
        },
        methods: {
            getTimes: async function () {
                this.times = [];
                let date = new Date(this.dateStr);
                let weekday = getWeekdayForDatetime(date);
                let worktime = this.therapist.worktimes.find((e) => e.weekday == weekday);
                if (worktime != undefined) {
                    let time = worktime.from;
                    while (new Date(this.dateStr + "T" + time).getTime() < new Date(this.dateStr + "T" + worktime.till).getTime()) {
                        if (this.therapist.appointments.filter((e) => e.from == time && new Date(new Date(e.date).getTime() + 120 * 60 * 1000).toISOString().substring(0,10) == date.toISOString().substring(0,10)).length == 0) {
                            this.times.push(time);
                            this.noTimes = false
                        }
                        time = new Date(new Date(this.dateStr + "T" + time).getTime() + 30 * 60 * 1000).toLocaleTimeString('de-DE');
                    }
                }
                if (this.times.length == 0) {
                    this.noTimes = true
                }
            },
            validate: function () {

                let lettersOnly = /^[a-zA-ZäöüÄÖÜß]*$/;
                this.invalidChars = !(
                    lettersOnly.test(this.name) && lettersOnly.test(this.firstname)
                );
                if (!this.invalidChars) {
                    this.disabled = false;
                } else {
                    this.disabled = true;
                }
            },
        },
        async created() {
            let url = new URL(origin + "/therapist/<%=therapist.id%>/patients");
            await fetch(url)
                .then((res) => res.json())
                .then((data) => (this.patients = data));

            url = new URL(origin + "/therapist/<%=therapist.id%>");
            await fetch(url)
                .then((res) => res.json())
                .then((data) => (this.therapist = data));
        },
    });
    app.mount("#app");

    function getWeekdayForDatetime(date) {
        let dayNum = date.getDay();
        switch (dayNum) {
            case 1:
                return "monday";
            case 2:
                return "tuesday";
            case 3:
                return "wednesday";
            case 4:
                return "thursday";
            case 5:
                return "friday";
        }
    }
</script>